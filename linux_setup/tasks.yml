- name: Check required variables are configured
  tags: do-not-render
  block:
    - fail:
        msg: Variable "setup_user" is not configured
      when: not setup_user|length
    - fail:
        msg: Variable "setup_ssh_authorized_key" is not configured
      when: not setup_ssh_authorized_key|length

- name: About this document
  block:
    - tags: linux-setup-comment
      debug:
        msg: |
          This is fancy rendering of ansible rules which I use to install
          linux on a new machine. See details at [github.com/lorien/linux_setup](https://github.com/lorien/linux_setup).

- name: Setup console font for non-GUI environment
  block:
    - tags: linux-setup-comment
      debug:
        msg: |
          For some reason `debconf-set-selections` does not affect on
          `dpkg-reconfigure console-setup`. Working approach is to
          change `/etc/default/console-setup` and then run `dpkg-reconfigure console-setup`.
    - apt:
        name: console-setup
    - tags: render-simple-setting
      lineinfile:
        path: /etc/default/console-setup
        regexp: '^CHARMAP\s*='
        line: 'CHARMAP="UTF-8"'
        insertbefore: 'EOF'
    - tags: render-simple-setting
      lineinfile:
        path: /etc/default/console-setup
        regexp: '^FONTFACE\s*='
        line: 'FONTFACE="VGA"'
        insertbefore: 'EOF'
    - tags: render-simple-setting
      lineinfile:
        path: /etc/default/console-setup
        regexp: '^FONTSIZE\s*='
        line: 'FONTSIZE="16x32"'
        insertbefore: 'EOF'
    - tags: render-simple-setting
      lineinfile:
        path: /etc/default/console-setup
        regexp: '^CODESET\s*='
        line: 'CODESET="Uni1"'
        insertbefore: 'EOF'
    - command:
        cmd: dpkg-reconfigure --frontend noninteractive console-setup
        
- name: Setup HTTPS support for APT repositories
  block:
    - apt:
        name:
          - apt-transport-https
          - curl

- name: Install bluetooth drivers
  block:
    - apt:
        name: firmware-iwlwifi

- name: Setup service for /etc/rc.local
  #todo_comment: Optionally restore file from backup
  #provide_tags: ["rc-local"]
  block:
    - name: Enable systemd rc-local service
      systemd_service:
        name: rc-local
        enabled: true
    - name: Ensure /etc/rc.local file exists
      copy:
        force: false
        dest: /etc/rc.local
        content: |
          #!/bin/bash
          exit 0
    - name: Ensure /etc/rc.local file is executable
      file:
        path: /etc/rc.local
        mode: '764'

- name: Install rfkill to enable/disable bluetooth and wifi adapters
  #provide_tags: ["rfkill"]
  block:
    - apt:
        name: rfkill

- name: Disable bluetooth
  #require_tags: ["rc-local", "rfkill"]
  block:
    - name: Stop bluetooth systemd service
      systemd_service:
        name: bluetooth
        state: stopped
        enabled: false
    - name: Setup disabling wifi on hardware level in /etc/rc.local
      tags: render-simple-setting
      lineinfile:
        path: /etc/rc.local
        regexp: 'rfkill block bluetooth'
        insertbefore: "^exit 0"
        line: rfkill block bluetooth

- name: Set up DNS
  block:
    - name: Configure public name services in /etc/resolv.conf
      copy:
          for—Åe: yes
          dest: /etc/resolv.conf
          content: |
              nameserver 8.8.8.8 # google
              nameserver 77.88.8.8 # yandex
    - name: Restrict modification of /etc/resolv.conf file
      file:
        path: /etc/resolv.conf
        attributes: "+i"

- name: Setup standard debian bookworm repositories
  block:
    #- name: Use HTTPS for all repositories
    #  replace:
    #    path: /etc/apt/sources.list
    #    regexp: '^deb http://(.+)'
    #    replace: 'deb https://\1'
    #- name: Use "main contrib non-free non-free-firmware" for all standard repositories
    #  replace:
    #    path: /etc/apt/sources.list
    #    regexp: '^(.+/(?:debian/? bookworm |debian/? bookworm-updates |debian-security/? bookworm-security )).*main.*'
    #    replace: '\1 main contrib non-free non-free-firmware'
    - copy:
        force: yes
        dest: /etc/apt/sources.list
        content: |
          deb https://ftp.debian.org/debian/ bookworm contrib main non-free non-free-firmware
          deb https://ftp.debian.org/debian/ bookworm-updates contrib main non-free non-free-firmware
          deb https://security.debian.org/debian-security/ bookworm-security contrib main non-free non-free-firmware
    - name: Update APT cache
      apt:
        update_cache: true

- name: Install SSH Server and disable it
  block:
    - name: Install ssh server
      apt:
        name: openssh-server
    - name: Disable and stop ssh server
      systemd_service:
        name: ssh
        enabled: false
        state: stopped

- name: Setup config files located at user home directory
  block:
    - copy:
        src: files/.xsession
        dest: /home/{{ setup_user }}/.xsession
        owner: "{{ setup_user }}"
        group: "{{ setup_user }}"
    - debug:
        msg: |
          Copy files from backup to user's home directory:
          - .vimrc
          - .config/awesome/rc.lua
          - .bashrc.personal
          - .tmux.conf
          - .gitconfig
          - .hgrc
          - .pypirc (HAS TOKEN)
          - .Xresources
          - .xbindkeysrc
          - ~/bin/
          Add `source ~/.bashrc.personal` to "~/.bashrc"

- name: Install sudo package and add user to sudo group
  block:
    - name: Install sudo package
      apt:
        name: sudo
    - name: Add user to sudo group
      user:
        name: "{{ setup_user }}"
        append: true
        groups: sudo

- name: Setup vim editor
  block:
    - apt:
        name:
          - python3-venv
          - git
          - vim-nox # vim packaged with extra features including python support
    - debug:
        msg: |
          TODO
          Also copy .vimrc to /root/.vimrc
          sudo pip3 install black
          Run vim, then inside thim run ":PlugInstall"
          Run: update-alternatives --config editor # choose vim-nox
          Run: select-editor # for current user, choose vim-nox
          Run: sudo select-editor # for root, choose vim-nox

- name: Copy ~/doc
  debug:
    msg: |
      Copy docs
      Symlink ~/doc/.ssh ~/.ssh

- name: System backup
  debug:
    msg: |
      /etc/hosts

- name: Install packages to run desktop environment
  block:
    - apt:
        name:
         - xorg
         - xserver-xorg-input-synaptics
         - xserver-xorg-input-all
         - awesome
         - slim
         - dbus-x11
         - vim-gui-common
         - xbindkeys
         - rxvt-unicode
         - xss-lock
         - flameshot
         - slock
         - brightnessctl

- name: Make urxvt default terminal emulator
  block:
    - command:
        cmd: update-alternatives --set x-terminal-emulator /usr/bin/urxvt

- name: Configure terminal emulator font
  block:
    - name: Install ttf-bitstream-vera font
      apt:
        name: ttf-bitstream-vera
    - debug:
        msg: |
          Possibly update "size=XX" in the line "URxvt ... font: xft:...size=XX"
          xrdb ~/.Xresources

- name: Install Network Manager and configure it
  block:
    - name: Install Network Manager and utilities
      apt:
        name:
          - network-manager
          - network-manager-gnome
          - network-manager-openvpn
    - debug:
        msg: |
          In [connection] section of NetworkManager config
          you may want to use "stable" instead of "random"
          if you want to keep your authentication state in
          hotel/airport/etc wifi networks.
    - debug: 
        msg: |
          Run: ifdown <wifi-interface>
          Comment out lines in /etc/network/interfaces related to wifi interface
          Run: systemctl restart networking
          Write to /etc/NetworkManager/conf.d/00-random-mac.conf:
              [device]
              wifi.scan-rand-mac-address=yes
              [connection]
              wifi.cloned-mac-address=random
              ethernet.cloned-mac-address=random
          Run: systemctl restart NetworkManager

- name: Random MAC address and hostname
  block:
    - debug:
        msg: |
          Pre-up hooks are built as symbolic links to post-down hooks
          because NetworkManager does not call pre-up hooks when
          setting up network connection.

    - name: Instal network post down hook to set random MAC address
      copy:
        force: true
        dest: /etc/network/if-post-down.d/zz_random_mac
        mode: '755'
        content: |
          #!/bin/sh
          #
          # Randomize MAC address.
          # This hook is not as same as default macchanger hook: this hook use -A flag.
          # This hook is post-down because NetworkManager does not run pre-up hooks.
          # There is also symlink to this file in pre-up

          LOGFILE="/var/log/post_down_random_mac.log"
          echo "DATE: $(date)" | tee -a $LOGFILE
          echo "IFACE: $IFACE" | tee -a $LOGFILE
          if [ "$IFACE" = "--all" -o "$IFACE" = "lo" -o "$IFACE" = "" ]; then
              echo "Ignoring interface [$IFACE]" | tee -a $LOGFILE
              exit 0
          fi
          /usr/bin/macchanger -A $IFACE 2>&1 | tee -a $LOGFILE

    - name: Setup network pre up hook as symblink to set random MAC address
      file:
        force: true
        path: "/etc/network/if-pre-up.d/zz_random_mac"
        state: link
        src: "../if-post-down.d/zz_random_mac"

    - name: Instal network post down hook to set random hostname
      copy:
        force: true
        dest: /etc/network/if-post-down.d/zz_random_hostname
        mode: '755'
        content: |
          #!/bin/sh
          #
          # Randomize hostname.
          # This hook is post-down because NetworkManager does not run pre-up hooks.
          # There is also symlink to this file in pre-up

          LOGFILE="/var/log/post_down_random_hostname.log"
          echo "DATE: $(date)" | tee -a $LOGFILE
          echo "IFACE: $IFACE" | tee -a $LOGFILE
          if [ "$IFACE" = "--all" -o "$IFACE" = "lo" -o "$IFACE" = "" ]; then
              echo "Ignoring interface [$IFACE]" | tee -a $LOGFILE
              exit 0
          fi
          NEW_HOSTNAME=$(cat /dev/urandom | head -c 100 | md5sum | head -c 8)
          echo "HOSTNAME: $(/usr/bin/hostname)" | tee -a $LOGFILE
          echo "NEW HOSTNAME: $NEW_HOSTNAME" | tee -a $LOGFILE
          /usr/bin/hostnamectl set-hostname $NEW_HOSTNAME 2>&1 | tee -a $LOGFILE

    - name: Setup network pre up hook to set random hostname
      file:
        force: true
        path: "/etc/network/if-pre-up.d/zz_random_hostname"
        state: link
        src: "../if-post-down.d/zz_random_hostname"

- name: Disable Avahi Daemon (MDNS) Publishing
  block:
    - debug:
        msg: Install avahi-daemon to ensure its config file exists
    - apt:
        name: avahi-daemon
    - lineinfile:
        path: /etc/avahi/avahi-daemon.conf
        regexp: '^\s*#?\s*disable-publishing\s*='
        line: "disable-publishing=yes"
        insertafter: '^\[publish\]'
    - systemd_service:
        name: avahi-daemon
        state: restarted
        


- name: Update ~/.Xresources
  debug:
    msg: |
      Use https://dpi.lv/ to calculate DPI
      Update "Xft.dpi: ..." line
      xrdb ~/.Xresources

- name: Start GUI
  debug:
    msg: |
      systemctl start slim
      if network manager says "device not ready" for wifi card, then restart laptop
      might be caused by old network settings in /etc/network/interfaces

- name: Intel sof (WTF?)
  debug:
    msg: |
      download tarball from https://github.com/thesofproject/sof-bin/releases
      unpack
      sudo mv /lib/firmware/intel/sof* some_backup_location/
      sudo mv /usr/local/bin/sof-*     some_backup_location/ # optional
      rsync -a sof-v1.7/       /lib/firmware/intel/sof/
      rsync -a sof-tplg-v1.7/  /lib/firmware/intel/sof-tplg/
      rsync tools-v1.7/        /usr/local/bin/

- name: Install brave browser
  block:
    - name: Download brave browser repo signature
      get_url:
        url: https://brave-browser-apt-release.s3.brave.com/brave-browser-archive-keyring.gpg
        dest: /usr/share/keyrings/brave-browser-archive-keyring.gpg
    - name: Configure APT repository for brave browser
      copy:
        dest: /etc/apt/sources.list.d/brave-browser-release.list
        content: |
          deb [signed-by=/usr/share/keyrings/brave-browser-archive-keyring.gpg] https://brave-browser-apt-release.s3.brave.com/ stable main
    - name: Install brave browser package
      apt:
        name: brave-browser
        update_cache: true

- name: As alternative to Brave Browser install Libre Wolf
  block:
    - debug:
        msg: |
          See ~/bin/install_librewolf.sh

- name: Powertop
  block:
    - debug:
        msg: |
          sudo powertop --auto-tune # WTF how it works?

- name: Sound
  block:
    - name: Install sound servers and utilities
      apt:
        name:
          - pulseaudio
          - pavucontrol
          - alsa-utils

- name: Install and configure development tools
  block:
    - name: Install development packages
      apt:
        name:
         - mariadb-client
         - git
         - mercurial
         - p7zip-full
         - unrar
         - xz-utils
         - libcurl4-openssl-dev
         - libssl-dev
         - build-essential
         - strace
         - screen
         - tmux
         - iotop
         - python-is-python3
         - python3-venv
         - dnsutils
         - whois
         - traceroute
         - pkg-config
         - python3-pip
         - psmisc
         - rsync
    - debug:
        msg: |
          pip3 install --break-system-packages -U pip
          pip3 install --break-system-packages -U \
              cookiecutter virtualenv pytest tox twine \
              autosort black isort

- name: Proxychains
  block:
    - debug:
        msg: |
          pip install -U mazer
          pip install -U ansible
          mazer install --namespace lorien git+https://github.com/lorien/cluster
          # or
          # cd /web
          # git clone https://github.com/lorien/cluster
          # mazer install -namespace lorien -e /web/cluster
          anz.py role lorien.cluster.proxychains local

- name: Setup using shared beeline internet
  block:
    - name: Set sysctl net.ipv4.ip_default_ttl
      ansible.posix.sysctl:
        name: net.ipv4.ip_default_ttl
        value: "65"

- name: Install smartmontools
  block:
    - apt:
        name: smartmontools

- name: Disable IPv6, optional
  block:
    - name: Set sysctl net.ipv6.conf.all.disable_ipv6
      ansible.posix.sysctl:
        name: net.ipv6.conf.all.disable_ipv6
        value: 1
    - name: Set sysctl net.ipv6.conf.default.disable_ipv6
      ansible.posix.sysctl:
        name: net.ipv6.conf.default.disable_ipv6
        value: 1
    - lineinfile:
        path: /etc/default/grub
        regexp: '^GRUB_CMDLINE_LINUX_DEFAULT="(.+)"'
        backrefs: true
        line: 'GRUB_CMDLINE_LINUX_DEFAULT="ipv6.disable=1 \1"'
    - command:
        cmd: update-grub

- name: Install tools for power management on laptop
  block:
    - apt:
        name: tlp

- name: Install tools to configure display brightness
  block:
    - name: Install brightnessctl package
      apt:
        name: brightnessctl
    - debug:
        msg: |
          sudo chown root:user /sys/devices/pci0000\:00/0000\:00\:02.0/drm/card0/card0-eDP-1/intel_backlight/brightness
          sudo chmod g+rw /sys/devices/pci0000\:00/0000\:00\:02.0/drm/card0/card0-eDP-1/intel_backlight/brightness
          Update ~/.xbindkeysrc
              "brightnessctl s 10%-"
                XF86MonBrightnessDown
              "brightnessctl s +10%"
                XF86MonBrightnessUp

- name: On desktop, disable wifi power save
  block:
    - debug:
        msg: |
          That helps to remove lags if you connect the desktop via ssh
          from other machine
          Put into /etc/NetworkManager/conf.d/default-wifi-powersave-on.conf:
              [connection]
              wifi.powersave = 2 # 2 means disable

- name: Setup SSH daemon
  block:
    - name: Configure SSH authorized key to access root account
      ansible.posix.authorized_key:
        key: "{{ setup_ssh_authorized_key }}"
        user: "root"
    - name: Configure SSH server do not use password authentication
      block:
        - tags: render-simple-setting
          lineinfile:
            path: /etc/ssh/sshd_config
            regexp: ^#*\s*PasswordAuthentication\s*(yes|no)\s*$
            line: PasswordAuthentication no
        - tags: render-simple-setting
          lineinfile:
            path: /etc/ssh/sshd_config
            regexp: ^#*\s*ChallengeResponseAuthentication\s*(yes|no)\s*$
            line: ChallengeResponseAuthentication no
    - name: Restart SSH server
      systemd_service:
        name: ssh
        state: restarted

- name: TRIM Operation for SSD
  block:
    - debug:
        msg: |
          There is nothing to do. Systemd service "fstrim" is active by default.

- name: Set low priority to use swap file
  block:
    - name: Set sysctl vm.swappiness
      ansible.posix.sysctl:
        name: vm.swappiness
        value: 1


- name: Install screenshot utils
  block:
    - apt:
        name: flameshot

- name: Setup system limits to run IDEA IDE
  block:
    - name: Set sysctl fs.inotify.max_user_watches
      ansible.posix.sysctl:
        name: fs.inotify.max_user_watches
        value: 524288

- name: Setup download directory
  block:
    - name: Create ~/Downloads directory
      file:
        path: "/home/{{ setup_user }}/Downloads"
        state: directory
        owner: "{{ setup_user }}"
        group: "{{ setup_user }}"
    - name: Create symlink ~/down -> ~/Downloads
      file:
        path: "/home/{{ setup_user }}/down"
        state: link
        src: "/home/{{ setup_user }}/Downloads"
        owner: "{{ setup_user }}"
        group: "{{ setup_user }}"

- name: Restart computer to ensure it works and starts normally
  block:
    - command:
        cmd: reboot


- name: Check list after restart
  block:
    - debug:
        msg: |
          Run pavucontrol, go Output Devices tab. Ensure that output is not muted.
